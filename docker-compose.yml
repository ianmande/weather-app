services:
  frontend:
    container_name: weather_frontend
    image: node:20-slim # usa la variante glibc multi-arch
    platform: linux/arm64/v8 # fuerza la misma arch que tu Mac M-series
    working_dir: /app
    volumes:
      - ./frontend:/app # cÃ³digo
      - frontend_node_modules:/app/node_modules # deps aisladas
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      VITE_API_URL: http://api:8000
      ROLLUP_NO_NATIVE: 1 # desactiva el binario nativo
    command: >
      sh -c "npm install --include=optional && npm run dev"
    depends_on:
      - api
    networks:
      - weather-network

  api:
    container_name: weather_api
    build:
      context: ./backend
      target: development
    volumes:
      - ./backend:/usr/src/app
      - api_node_modules:/usr/src/app/node_modules
    ports:
      - "8000:3000"
    command: npm run start:dev
    env_file:
      - ./backend/.env
    environment:
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_NAME: weather_db
    depends_on:
      - postgres
    networks:
      - weather-network

  postgres:
    container_name: weather_postgres
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: weather_db
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - weather-network
    restart: unless-stopped

  pgadmin:
    container_name: weather_pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - weather-network
    restart: unless-stopped

volumes:
  postgres-data:
  frontend_node_modules:
  api_node_modules:

networks:
  weather-network:
    driver: bridge
